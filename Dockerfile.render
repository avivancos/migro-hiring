# Dockerfile específico para Render
# Build de producción SOLAMENTE (sin dev server)
# Uso: Configurar en render.yaml -> dockerfilePath: ./Dockerfile.render

# ==========================================
# Stage 1: Builder
# ==========================================
FROM node:20-alpine AS builder

WORKDIR /app

# Copiar archivos de dependencias
COPY package.json package-lock.json* ./

# Instalar dependencias con cache limpio
RUN npm cache clean --force && \
    npm ci --legacy-peer-deps --no-audit --no-fund

# Copiar código fuente
COPY . .

# Variables de entorno para build
ARG VITE_API_BASE_URL=https://api.migro.es/api
ARG VITE_STRIPE_PUBLISHABLE_KEY
ARG VITE_APP_URL=https://contratacion.migro.es
ARG VITE_DEBUG_MODE=false
ARG VITE_API_TIMEOUT=30000

ENV VITE_API_BASE_URL=$VITE_API_BASE_URL
ENV VITE_STRIPE_PUBLISHABLE_KEY=$VITE_STRIPE_PUBLISHABLE_KEY
ENV VITE_APP_URL=$VITE_APP_URL
ENV VITE_DEBUG_MODE=$VITE_DEBUG_MODE
ENV VITE_API_TIMEOUT=$VITE_API_TIMEOUT

# Build de producción
RUN rm -rf dist node_modules/.cache && \
    npm run build && \
    ls -lh dist/ && \
    echo "✅ Build de producción completado"

# ==========================================
# Stage 2: Production (Nginx)
# ==========================================
FROM nginx:alpine

# Copiar configuración de Nginx
COPY docker/nginx.conf /etc/nginx/conf.d/default.conf

# Copiar archivos compilados
COPY --from=builder /app/dist /usr/share/nginx/html

# Verificar que los archivos existen
RUN ls -lh /usr/share/nginx/html/ && \
    echo "✅ Archivos estáticos copiados a Nginx"

# Exponer puerto 80
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --quiet --tries=1 --spider http://localhost/ || exit 1

# Iniciar Nginx
CMD ["nginx", "-g", "daemon off;"]

