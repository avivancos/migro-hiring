# Makefile para comandos Docker simplificados
# Uso: make <comando>

.PHONY: help dev prod stop clean logs shell install build test

# Colores para output
RED=\033[0;31m
GREEN=\033[0;32m
YELLOW=\033[1;33m
NC=\033[0m # No Color

help: ## Mostrar esta ayuda
	@echo "$(GREEN)Migro Hiring - Comandos Docker$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(YELLOW)%-15s$(NC) %s\n", $$1, $$2}'

dev: ## Iniciar entorno de desarrollo
	@echo "$(GREEN)üöÄ Iniciando entorno de desarrollo...$(NC)"
	docker-compose up dev

dev-d: ## Iniciar desarrollo en segundo plano
	@echo "$(GREEN)üöÄ Iniciando desarrollo en background...$(NC)"
	docker-compose up -d dev
	@echo "$(GREEN)‚úÖ Desarrollo activo en http://localhost:5173$(NC)"

prod: ## Iniciar entorno de producci√≥n
	@echo "$(GREEN)üöÄ Iniciando producci√≥n...$(NC)"
	docker-compose --profile production up prod

prod-d: ## Iniciar producci√≥n en segundo plano
	@echo "$(GREEN)üöÄ Iniciando producci√≥n en background...$(NC)"
	docker-compose --profile production up -d prod
	@echo "$(GREEN)‚úÖ Producci√≥n activa en http://localhost$(NC)"

mock: ## Iniciar con Mock API
	@echo "$(GREEN)üöÄ Iniciando con Mock API...$(NC)"
	docker-compose --profile mock up dev mock-api

stop: ## Detener todos los servicios
	@echo "$(YELLOW)‚è∏ Deteniendo servicios...$(NC)"
	docker-compose down

clean: ## Limpiar contenedores, vol√∫menes e im√°genes
	@echo "$(RED)üßπ Limpiando todo...$(NC)"
	docker-compose down -v --rmi all

logs: ## Ver logs de desarrollo
	docker-compose logs -f dev

logs-prod: ## Ver logs de producci√≥n
	docker-compose logs -f prod

shell: ## Acceder al shell del contenedor de desarrollo
	@echo "$(GREEN)üêö Accediendo al shell...$(NC)"
	docker-compose exec dev sh

install: ## Instalar nueva dependencia (uso: make install PKG=nombre-paquete)
	@echo "$(GREEN)üì¶ Instalando $(PKG)...$(NC)"
	docker-compose exec dev npm install $(PKG)
	@echo "$(GREEN)‚úÖ $(PKG) instalado$(NC)"

build: ## Build de producci√≥n
	@echo "$(GREEN)üèóÔ∏è  Building producci√≥n...$(NC)"
	docker-compose --profile production build prod

rebuild: ## Rebuild forzado
	@echo "$(YELLOW)üîÑ Rebuild completo...$(NC)"
	docker-compose build --no-cache dev

ps: ## Ver estado de contenedores
	docker-compose ps

restart: ## Reiniciar desarrollo
	@echo "$(YELLOW)üîÑ Reiniciando desarrollo...$(NC)"
	docker-compose restart dev

test: ## Ejecutar tests (cuando existan)
	@echo "$(GREEN)üß™ Ejecutando tests...$(NC)"
	docker-compose exec dev npm run test

lint: ## Ejecutar linter
	@echo "$(GREEN)üîç Ejecutando linter...$(NC)"
	docker-compose exec dev npm run lint

format: ## Formatear c√≥digo
	@echo "$(GREEN)‚ú® Formateando c√≥digo...$(NC)"
	docker-compose exec dev npm run format

health: ## Ver health status
	@echo "$(GREEN)‚ù§Ô∏è  Health check:$(NC)"
	@curl -s http://localhost:5173 > /dev/null && echo "$(GREEN)‚úÖ Dev: OK$(NC)" || echo "$(RED)‚ùå Dev: FAIL$(NC)"

prune: ## Limpiar sistema Docker completo (CUIDADO)
	@echo "$(RED)‚ö†Ô∏è  Limpiando TODO el sistema Docker...$(NC)"
	@read -p "¬øEst√°s seguro? [y/N] " -n 1 -r; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		docker system prune -a --volumes; \
	fi

# Default target
.DEFAULT_GOAL := help

